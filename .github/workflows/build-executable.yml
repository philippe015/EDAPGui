name: Build Executable

on:
  release:
    types: [created]
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    # CORRIGÉ : Mise à jour vers la v4
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    # AMÉLIORÉ : Ajout du cache pour accélérer l'installation
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install custom PyInstaller
      run: |
        $Env:CL = "/Od"
        $Env:PYINSTALLER_COMPILE_BOOTLOADER = "true"
        python -m pip install --force-reinstall --ignore-installed --no-binary :all: --no-cache pyinstaller@git+https://github.com/pyinstaller/pyinstaller.git@0d562b5
        $Env:CL = ""
        
    # AMÉLIORÉ : Génère les informations de version dynamiquement à partir du tag de la release
    - name: Create Version Info
      shell: pwsh
      run: |
        $version = "1.0.0.0"
        $versionStr = "1.0.0"
        if ("${{ github.event_name }}" -eq "release") {
          $versionStr = "${{ github.event.release.tag_name }}".TrimStart('v')
          $versionParts = $versionStr.Split('.')
          if ($versionParts.Length -ge 3) {
            $version = "$($versionParts[0]), $($versionParts[1]), $($versionParts[2]), 0"
          }
        }
        
        $versionInfoContent = @"
        VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=($version),
            prodvers=($version),
            mask=0x3f,
            flags=0x0,
            OS=0x40004,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo([
              StringTable(
                u'040904B0',
                [StringStruct(u'CompanyName', u'EDAP'),
                 StringStruct(u'FileDescription', u'EDAP Autopilot'),
                 StringStruct(u'FileVersion', u'$versionStr'),
                 StringStruct(u'InternalName', u'EDAP_Autopilot'),
                 StringStruct(u'LegalCopyright', u'Copyright (c) 2024'),
                 StringStruct(u'OriginalFilename', u'EDAP-Autopilot.exe'),
                 StringStruct(u'ProductName', u'EDAP Autopilot'),
                 StringStruct(u'ProductVersion', u'$versionStr')])
              ]),
            VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
          ]
        )
        "@
        Set-Content -Path "version_info.txt" -Value $versionInfoContent

    - name: Build executable
      id: build
      run: |
        if ("${{ github.event_name }}" -eq "release") {
          $versionTag = "${{ github.event.release.tag_name }}"
          $buildName = "EDAP-Autopilot-${versionTag}"
        } else {
          $buildDate = Get-Date -Format "yyyy-MM-dd"
          $buildName = "EDAP-Autopilot-${buildDate}"
        }
        echo "BUILD_NAME=$buildName" >> $env:GITHUB_ENV
        echo "Build from commit ${{ github.sha }}" > build_info.txt
        if (-not (Test-Path -Path "config.json")) { echo "{}" > config.json }
        
        pyinstaller --onedir --windowed --icon="screen\edap.ico" `
          --add-data "screen\edap.ico;screen" --add-data "screen\*.png;screen" `
          --add-data "*.py;." --add-data "build_info.txt;." --add-data "config.json;." `
          --collect-data "paddle" --collect-all "paddleocr" `
          --hidden-import=PIL --hidden-import=PIL._imagingtk --hidden-import=PIL._tkinter_finder `
          --version-file="version_info.txt" --name "$buildName" `
          --clean --noupx --noconfirm EDAPGui.py
        
        Compress-Archive -Path ".\dist\$buildName" -DestinationPath ".\dist\$buildName.zip"
        
        if (Test-Path ".\dist\$buildName.zip") { echo "Build successful: $buildName.zip" } 
        else { echo "Build failed"; exit 1 }

    - name: Check build with Windows Defender
      continue-on-error: true
      run: |
        $buildPath = Resolve-Path ".\dist\${{ env.BUILD_NAME }}"
        echo "Scanning path: $buildPath"
        & "C:\Program Files\Windows Defender\MpCmdRun.exe" -Scan -ScanType 3 -File "$buildPath"
        
    # CORRIGÉ et AMÉLIORÉ : L'upload d'artefact est maintenant complet et la publication sur la release a été ajoutée.
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: EDAP-Autopilot-Windows
        path: ./dist/${{ env.BUILD_NAME }}.zip

    - name: Upload to Release Page
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: ./dist/${{ env.BUILD_NAME }}.zipname: Build Executable

on:
  release:
    types: [created]
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    # CORRIGÉ : Mise à jour vers la v4
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    # AMÉLIORÉ : Ajout du cache pour accélérer l'installation
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install custom PyInstaller
      run: |
        $Env:CL = "/Od"
        $Env:PYINSTALLER_COMPILE_BOOTLOADER = "true"
        python -m pip install --force-reinstall --ignore-installed --no-binary :all: --no-cache pyinstaller@git+https://github.com/pyinstaller/pyinstaller.git@0d562b5
        $Env:CL = ""
        
    # AMÉLIORÉ : Génère les informations de version dynamiquement à partir du tag de la release
    - name: Create Version Info
      shell: pwsh
      run: |
        $version = "1.0.0.0"
        $versionStr = "1.0.0"
        if ("${{ github.event_name }}" -eq "release") {
          $versionStr = "${{ github.event.release.tag_name }}".TrimStart('v')
          $versionParts = $versionStr.Split('.')
          if ($versionParts.Length -ge 3) {
            $version = "$($versionParts[0]), $($versionParts[1]), $($versionParts[2]), 0"
          }
        }
        
        $versionInfoContent = @"
        VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=($version),
            prodvers=($version),
            mask=0x3f,
            flags=0x0,
            OS=0x40004,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo([
              StringTable(
                u'040904B0',
                [StringStruct(u'CompanyName', u'EDAP'),
                 StringStruct(u'FileDescription', u'EDAP Autopilot'),
                 StringStruct(u'FileVersion', u'$versionStr'),
                 StringStruct(u'InternalName', u'EDAP_Autopilot'),
                 StringStruct(u'LegalCopyright', u'Copyright (c) 2024'),
                 StringStruct(u'OriginalFilename', u'EDAP-Autopilot.exe'),
                 StringStruct(u'ProductName', u'EDAP Autopilot'),
                 StringStruct(u'ProductVersion', u'$versionStr')])
              ]),
            VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
          ]
        )
        "@
        Set-Content -Path "version_info.txt" -Value $versionInfoContent

    - name: Build executable
      id: build
      run: |
        if ("${{ github.event_name }}" -eq "release") {
          $versionTag = "${{ github.event.release.tag_name }}"
          $buildName = "EDAP-Autopilot-${versionTag}"
        } else {
          $buildDate = Get-Date -Format "yyyy-MM-dd"
          $buildName = "EDAP-Autopilot-${buildDate}"
        }
        echo "BUILD_NAME=$buildName" >> $env:GITHUB_ENV
        echo "Build from commit ${{ github.sha }}" > build_info.txt
        if (-not (Test-Path -Path "config.json")) { echo "{}" > config.json }
        
        pyinstaller --onedir --windowed --icon="screen\edap.ico" `
          --add-data "screen\edap.ico;screen" --add-data "screen\*.png;screen" `
          --add-data "*.py;." --add-data "build_info.txt;." --add-data "config.json;." `
          --collect-data "paddle" --collect-all "paddleocr" `
          --hidden-import=PIL --hidden-import=PIL._imagingtk --hidden-import=PIL._tkinter_finder `
          --version-file="version_info.txt" --name "$buildName" `
          --clean --noupx --noconfirm EDAPGui.py
        
        Compress-Archive -Path ".\dist\$buildName" -DestinationPath ".\dist\$buildName.zip"
        
        if (Test-Path ".\dist\$buildName.zip") { echo "Build successful: $buildName.zip" } 
        else { echo "Build failed"; exit 1 }

    - name: Check build with Windows Defender
      continue-on-error: true
      run: |
        $buildPath = Resolve-Path ".\dist\${{ env.BUILD_NAME }}"
        echo "Scanning path: $buildPath"
        & "C:\Program Files\Windows Defender\MpCmdRun.exe" -Scan -ScanType 3 -File "$buildPath"
        
    # CORRIGÉ et AMÉLIORÉ : L'upload d'artefact est maintenant complet et la publication sur la release a été ajoutée.
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: EDAP-Autopilot-Windows
        path: ./dist/${{ env.BUILD_NAME }}.zip

    - name: Upload to Release Page
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: ./dist/${{ env.BUILD_NAME }}.zip
